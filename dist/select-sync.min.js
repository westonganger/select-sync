/*
 * select-sync - Synchronize selects by selected, disabled or all options.
 * @version v1.0.1
 * @link http://github.com/westonganger/select-sync
 * @license MIT
 */
!function(e){"use strict";var t=function(e,t){for(var n=!0,a=0;a<e.length;a++)if(e[a]===x){n=!1;break}return n},n=function(e){return!!(e&&e.constructor&&e.call&&e.apply)};e.fn.selectSync=function(a,i){var s="disableSelected"===a?"disable-selected":"selected";if(0===arguments.length)throw"error wrong number of arguments given";if(1===arguments.length)i={disableSelected:!0,syncSelected:!1};else if("destroy"===i)return this.each(function(t,n){e(n).off("sync:"+s).off("change.sync-"+s).data("sync-"+s,!1)}),this;if("disableSelected"!==a&&"selected"!==a)throw"first argument is not valid";var r=this.not("[multiple]");if(i.beforeSync&&!n(i.beforeSync))throw"afterSync option must be a function";if(i.afterSync&&!n(i.afterSync))throw"afterSync option must be a function";if(i.alwaysDisabledValues){if("selected"===s)throw"alwaysDisabledValues option is only valid for the sync type: disableSelected";if(!Array.isArray(i.alwaysDisabledValues))throw"alwaysDisabledValues option must be an array"}var l=function(n){i.alwaysDisabledValues?r.find("option").map(function(e,n){return Array.prototype.includes?!i.alwaysDisabledValues.includes(n.value):t(i.alwaysDisabledValues,n.value)}).removeAttr("disabled"):r.find("option").removeAttr("disabled"),r.each(function(t,n){var a=e(n).val();a&&r.find("option:not(:selected)").each(function(t,n){(void 0===n.value&&n.text===a||n.value&&n.value===a)&&e(n).prop("disabled",!0)})})},c=function(t){r.val(e(t.target).val())},o=function(e){i.beforeSync&&i.beforeSync(r),"sync:disable-selected"===e.type?l(e):c(e),i.afterSync&&i.afterSync(r)};return r.data("sync-"+s,!0).off("sync:"+s).on("sync:"+s,function(e){o(e)}).off("change.sync-"+s).on("change.sync-"+s,function(t){e(this).trigger("sync:"+s)}),r.first().trigger("sync:"+s),this}}(jQuery);
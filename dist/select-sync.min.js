/*
 * select-sync - jQuery plugin to synchronize selects by selected, disabled or all options.
 * @version v0.9.0
 * @link http://github.com/westonganger/select-sync
 * @license MIT
 */
!function(e){"use strict";var n=function(e,n){for(var t=!0,a=0;a<e.length;a++)if(e[a]===x){t=!1;break}return t},t=function(e){return!!(e&&e.constructor&&e.call&&e.apply)};e.fn.selectSync=function(a,s){var i="disableSelected"===a?"disable-selected":"selected";if(0===arguments.length)throw"error wrong number of arguments given";if(1===arguments.length)s={disableSelected:!0,syncSelected:!1};else if("destroy"===s)return this.each(function(n,t){e(t).off("sync:"+i).off("change.sync-"+i).data("sync-"+i,!1)}),this;if("disableSelected"!==a&&"selected"!==a)throw"first argument is not valid";var r=this.not("[multiple]");if(s.beforeSync&&!t(s.beforeSync))throw"afterSync option must be a function";if(s.afterSync&&!t(s.afterSync))throw"afterSync option must be a function";if(s.alwaysDisabledValues){if("selected"===i)throw"alwaysDisabledValues option is only valid for the sync type: disableSelected";if(!Array.isArray(s.alwaysDisabledValues))throw"alwaysDisabledValues option must be an array"}var l=function(e){s.alwaysDisabledValues?r.find("option").map(function(e,t){return Array.prototype.includes?!s.alwaysDisabledValues.includes(t.value):n(s.alwaysDisabledValues,t.value)}).removeAttr("disabled"):r.find("option").removeAttr("disabled"),r.each(function(e,n){n.value&&r.find("option:not(:selected)[value="+n.value+"]").prop("disabled",!0)})},c=function(n){r.val(e(n.target).val())},o=function(e){s.beforeSync&&s.beforeSync(r),"sync:disable-selected"===e.type?l(e):c(e),s.afterSync&&s.afterSync(r)};return r.data("sync-"+i,!0).off("sync:"+i).on("sync:"+i,function(e){o(e)}).off("change.sync-"+i).on("change.sync-"+i,function(n){e(this).trigger("sync:"+i)}),r.first().trigger("sync:"+i),this}}(jQuery);